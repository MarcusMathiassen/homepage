import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_slots, e as element, t as text, c as claim_element, a as children, b as claim_text, f as detach_dev, g as attr_dev, h as add_location, j as insert_dev, k as append_dev, n as noop, l as validate_each_argument, m as stores$1, o as validate_store, p as component_subscribe, q as set_style, r as destroy_each, u as empty, w as onMount, x as create_component, y as claim_component, z as mount_component, A as transition_out, B as check_outros, C as transition_in, D as destroy_component, E as query_selector_all, F as group_outros } from './client.987988c1.js';

/* src/components/hero.svelte generated by Svelte v3.19.2 */

const file = "src/components/hero.svelte";

function create_fragment(ctx) {
	let section;
	let div6;
	let div5;
	let div4;
	let div3;
	let img;
	let img_src_value;
	let h1;
	let t0;
	let h2;
	let t1;
	let span0;
	let t2;
	let t3;
	let span1;
	let t4;
	let t5;
	let div2;
	let div0;
	let a0;
	let span2;
	let i0;
	let span3;
	let t6;
	let div1;
	let a1;
	let span4;
	let i1;
	let span5;
	let t7;

	const block = {
		c: function create() {
			section = element("section");
			div6 = element("div");
			div5 = element("div");
			div4 = element("div");
			div3 = element("div");
			img = element("img");
			h1 = element("h1");
			t0 = text("Marcus Mathiassen");
			h2 = element("h2");
			t1 = text("Interested in ");
			span0 = element("span");
			t2 = text("graphics");
			t3 = text(" and all things ");
			span1 = element("span");
			t4 = text("UX");
			t5 = text(".\n");
			div2 = element("div");
			div0 = element("div");
			a0 = element("a");
			span2 = element("span");
			i0 = element("i");
			span3 = element("span");
			t6 = text("Github");
			div1 = element("div");
			a1 = element("a");
			span4 = element("span");
			i1 = element("i");
			span5 = element("span");
			t7 = text("Youtube");
			this.h();
		},
		l: function claim(nodes) {
			section = claim_element(nodes, "SECTION", { class: true });
			var section_nodes = children(section);
			div6 = claim_element(section_nodes, "DIV", { class: true });
			var div6_nodes = children(div6);
			div5 = claim_element(div6_nodes, "DIV", { class: true });
			var div5_nodes = children(div5);
			div4 = claim_element(div5_nodes, "DIV", { class: true });
			var div4_nodes = children(div4);
			div3 = claim_element(div4_nodes, "DIV", { class: true });
			var div3_nodes = children(div3);
			img = claim_element(div3_nodes, "IMG", { src: true, width: true, class: true });
			h1 = claim_element(div3_nodes, "H1", { class: true });
			var h1_nodes = children(h1);
			t0 = claim_text(h1_nodes, "Marcus Mathiassen");
			h1_nodes.forEach(detach_dev);
			h2 = claim_element(div3_nodes, "H2", { class: true });
			var h2_nodes = children(h2);
			t1 = claim_text(h2_nodes, "Interested in ");
			span0 = claim_element(h2_nodes, "SPAN", { class: true });
			var span0_nodes = children(span0);
			t2 = claim_text(span0_nodes, "graphics");
			span0_nodes.forEach(detach_dev);
			t3 = claim_text(h2_nodes, " and all things ");
			span1 = claim_element(h2_nodes, "SPAN", { class: true });
			var span1_nodes = children(span1);
			t4 = claim_text(span1_nodes, "UX");
			span1_nodes.forEach(detach_dev);
			t5 = claim_text(h2_nodes, ".\n");
			h2_nodes.forEach(detach_dev);
			div2 = claim_element(div3_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			div0 = claim_element(div2_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);

			a0 = claim_element(div0_nodes, "A", {
				class: true,
				href: true,
				target: true,
				rel: true,
				"aria-label": true
			});

			var a0_nodes = children(a0);
			span2 = claim_element(a0_nodes, "SPAN", { class: true });
			var span2_nodes = children(span2);
			i0 = claim_element(span2_nodes, "I", { class: true });
			children(i0).forEach(detach_dev);
			span2_nodes.forEach(detach_dev);
			span3 = claim_element(a0_nodes, "SPAN", {});
			var span3_nodes = children(span3);
			t6 = claim_text(span3_nodes, "Github");
			span3_nodes.forEach(detach_dev);
			a0_nodes.forEach(detach_dev);
			div0_nodes.forEach(detach_dev);
			div1 = claim_element(div2_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);

			a1 = claim_element(div1_nodes, "A", {
				class: true,
				href: true,
				target: true,
				rel: true,
				"aria-label": true
			});

			var a1_nodes = children(a1);
			span4 = claim_element(a1_nodes, "SPAN", { class: true });
			var span4_nodes = children(span4);
			i1 = claim_element(span4_nodes, "I", { class: true });
			children(i1).forEach(detach_dev);
			span4_nodes.forEach(detach_dev);
			span5 = claim_element(a1_nodes, "SPAN", {});
			var span5_nodes = children(span5);
			t7 = claim_text(span5_nodes, "Youtube");
			span5_nodes.forEach(detach_dev);
			a1_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			div3_nodes.forEach(detach_dev);
			div4_nodes.forEach(detach_dev);
			div5_nodes.forEach(detach_dev);
			div6_nodes.forEach(detach_dev);
			section_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			if (img.src !== (img_src_value = "avatar.jpg")) attr_dev(img, "src", img_src_value);
			attr_dev(img, "width", "200px");
			attr_dev(img, "class", "svelte-hrm4o8");
			add_location(img, file, 21, 162, 464);
			attr_dev(h1, "class", "title is-2");
			add_location(h1, file, 21, 198, 500);
			attr_dev(span0, "class", "has-text-weight-bold fancy-font");
			add_location(span0, file, 21, 278, 580);
			attr_dev(span1, "class", "has-text-weight-bold fancy-font");
			add_location(span1, file, 21, 355, 657);
			attr_dev(h2, "class", "subtitle");
			add_location(h2, file, 21, 243, 545);
			attr_dev(i0, "class", "fab fa-github");
			add_location(i0, file, 22, 244, 958);
			attr_dev(span2, "class", "icon");
			add_location(span2, file, 22, 225, 939);
			add_location(span3, file, 22, 280, 994);
			attr_dev(a0, "class", "button is-text is-size-4");
			attr_dev(a0, "href", "https://github.com/MarcusMathiassen");
			attr_dev(a0, "target", "_blank");
			attr_dev(a0, "rel", "noopener");
			attr_dev(a0, "aria-label", "Checkout my Github");
			add_location(a0, file, 22, 83, 797);
			attr_dev(div0, "class", "column is-narrow");
			add_location(div0, file, 22, 53, 767);
			attr_dev(i1, "class", "fab fa-youtube");
			add_location(i1, file, 22, 518, 1232);
			attr_dev(span4, "class", "icon");
			add_location(span4, file, 22, 499, 1213);
			add_location(span5, file, 22, 555, 1269);
			attr_dev(a1, "class", "button is-text is-size-4");
			attr_dev(a1, "href", "https://www.youtube.com/user/MathiassenMarcus/videos");
			attr_dev(a1, "target", "_blank");
			attr_dev(a1, "rel", "noopener");
			attr_dev(a1, "aria-label", "Checkout my Youtube");
			add_location(a1, file, 22, 339, 1053);
			attr_dev(div1, "class", "column is-narrow");
			add_location(div1, file, 22, 309, 1023);
			attr_dev(div2, "class", "columns is-3 is-centered is-mobile");
			add_location(div2, file, 22, 5, 719);
			attr_dev(div3, "class", "column is-narrow");
			add_location(div3, file, 21, 132, 434);
			attr_dev(div4, "class", "columns is-centered is-vcentered");
			add_location(div4, file, 21, 86, 388);
			attr_dev(div5, "class", "container has-text-centered");
			add_location(div5, file, 21, 45, 347);
			attr_dev(div6, "class", "hero-body");
			add_location(div6, file, 21, 22, 324);
			attr_dev(section, "class", "hero");
			add_location(section, file, 21, 0, 302);
		},
		m: function mount(target, anchor) {
			insert_dev(target, section, anchor);
			append_dev(section, div6);
			append_dev(div6, div5);
			append_dev(div5, div4);
			append_dev(div4, div3);
			append_dev(div3, img);
			append_dev(div3, h1);
			append_dev(h1, t0);
			append_dev(div3, h2);
			append_dev(h2, t1);
			append_dev(h2, span0);
			append_dev(span0, t2);
			append_dev(h2, t3);
			append_dev(h2, span1);
			append_dev(span1, t4);
			append_dev(h2, t5);
			append_dev(div3, div2);
			append_dev(div2, div0);
			append_dev(div0, a0);
			append_dev(a0, span2);
			append_dev(span2, i0);
			append_dev(a0, span3);
			append_dev(span3, t6);
			append_dev(div2, div1);
			append_dev(div1, a1);
			append_dev(a1, span4);
			append_dev(span4, i1);
			append_dev(a1, span5);
			append_dev(span5, t7);
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(section);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props) {
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Hero> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Hero", $$slots, []);
	return [];
}

class Hero extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Hero",
			options,
			id: create_fragment.name
		});
	}
}

/* src/components/blog.svelte generated by Svelte v3.19.2 */
const file$1 = "src/components/blog.svelte";

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[6] = list[i];
	return child_ctx;
}

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[3] = list[i];
	return child_ctx;
}

// (12:347) {#if post.keys}
function create_if_block(ctx) {
	let span;
	let each_value_1 = /*post*/ ctx[3].keys;
	validate_each_argument(each_value_1);
	let each_blocks = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	const block = {
		c: function create() {
			span = element("span");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			span = claim_element(nodes, "SPAN", { class: true });
			var span_nodes = children(span);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(span_nodes);
			}

			span_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span, "class", "badge");
			add_location(span, file$1, 11, 362, 562);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(span, null);
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*posts*/ 2) {
				each_value_1 = /*post*/ ctx[3].keys;
				validate_each_argument(each_value_1);
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(span, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_1.length;
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(12:347) {#if post.keys}",
		ctx
	});

	return block;
}

// (12:382) {#each post.keys as key}
function create_each_block_1(ctx) {
	let span;
	let t_value = /*key*/ ctx[6] + "";
	let t;

	const block = {
		c: function create() {
			span = element("span");
			t = text(t_value);
			this.h();
		},
		l: function claim(nodes) {
			span = claim_element(nodes, "SPAN", { class: true });
			var span_nodes = children(span);
			t = claim_text(span_nodes, t_value);
			span_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span, "class", "tag");
			add_location(span, file$1, 11, 406, 606);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			append_dev(span, t);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_1.name,
		type: "each",
		source: "(12:382) {#each post.keys as key}",
		ctx
	});

	return block;
}

// (12:196) {#each posts as post}
function create_each_block(ctx) {
	let li;
	let a;
	let span;
	let t_value = /*post*/ ctx[3].title + "";
	let t;
	let a_href_value;
	let if_block = /*post*/ ctx[3].keys && create_if_block(ctx);

	const block = {
		c: function create() {
			li = element("li");
			a = element("a");
			span = element("span");
			t = text(t_value);
			if (if_block) if_block.c();
			this.h();
		},
		l: function claim(nodes) {
			li = claim_element(nodes, "LI", {});
			var li_nodes = children(li);
			a = claim_element(li_nodes, "A", { class: true, rel: true, href: true });
			var a_nodes = children(a);
			span = claim_element(a_nodes, "SPAN", { class: true });
			var span_nodes = children(span);
			t = claim_text(span_nodes, t_value);
			span_nodes.forEach(detach_dev);
			if (if_block) if_block.l(a_nodes);
			a_nodes.forEach(detach_dev);
			li_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span, "class", "name");
			add_location(span, file$1, 11, 309, 509);
			attr_dev(a, "class", "button is-text is-block has-text-left");
			attr_dev(a, "rel", "prefetch");
			attr_dev(a, "href", a_href_value = "blog/" + /*post*/ ctx[3].slug);
			add_location(a, file$1, 11, 221, 421);
			add_location(li, file$1, 11, 217, 417);
		},
		m: function mount(target, anchor) {
			insert_dev(target, li, anchor);
			append_dev(li, a);
			append_dev(a, span);
			append_dev(span, t);
			if (if_block) if_block.m(a, null);
		},
		p: function update(ctx, dirty) {
			if (/*post*/ ctx[3].keys) if_block.p(ctx, dirty);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(li);
			if (if_block) if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(12:196) {#each posts as post}",
		ctx
	});

	return block;
}

function create_fragment$1(ctx) {
	let h3;
	let a;
	let span0;
	let i;
	let span1;
	let t;
	let ul;
	let each_value = /*posts*/ ctx[1];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			h3 = element("h3");
			a = element("a");
			span0 = element("span");
			i = element("i");
			span1 = element("span");
			t = text("Posts");
			ul = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			h3 = claim_element(nodes, "H3", {});
			var h3_nodes = children(h3);

			a = claim_element(h3_nodes, "A", {
				class: true,
				href: true,
				"aria-label": true
			});

			var a_nodes = children(a);
			span0 = claim_element(a_nodes, "SPAN", { class: true, style: true });
			var span0_nodes = children(span0);
			i = claim_element(span0_nodes, "I", { class: true });
			children(i).forEach(detach_dev);
			span0_nodes.forEach(detach_dev);
			span1 = claim_element(a_nodes, "SPAN", {});
			var span1_nodes = children(span1);
			t = claim_text(span1_nodes, "Posts");
			span1_nodes.forEach(detach_dev);
			a_nodes.forEach(detach_dev);
			h3_nodes.forEach(detach_dev);
			ul = claim_element(nodes, "UL", {});
			var ul_nodes = children(ul);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(ul_nodes);
			}

			ul_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(i, "class", "fas fa-book-open");
			add_location(i, file$1, 11, 126, 326);
			attr_dev(span0, "class", "icon");
			set_style(span0, "margin-right", "0.5rem");
			add_location(span0, file$1, 11, 78, 278);
			add_location(span1, file$1, 11, 165, 365);
			attr_dev(a, "class", "is-size-4 has-text-dark");
			attr_dev(a, "href", "blog");
			attr_dev(a, "aria-label", "checkout blog");
			add_location(a, file$1, 11, 4, 204);
			add_location(h3, file$1, 11, 0, 200);
			add_location(ul, file$1, 11, 192, 392);
		},
		m: function mount(target, anchor) {
			insert_dev(target, h3, anchor);
			append_dev(h3, a);
			append_dev(a, span0);
			append_dev(span0, i);
			append_dev(a, span1);
			append_dev(span1, t);
			insert_dev(target, ul, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*posts*/ 2) {
				each_value = /*posts*/ ctx[1];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(ul, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(h3);
			if (detaching) detach_dev(ul);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	let $session;
	const { session } = stores$1();
	validate_store(session, "session");
	component_subscribe($$self, session, value => $$invalidate(2, $session = value));
	let posts = $session.posts;
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Blog> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Blog", $$slots, []);
	$$self.$capture_state = () => ({ stores: stores$1, session, posts, $session });

	$$self.$inject_state = $$props => {
		if ("posts" in $$props) $$invalidate(1, posts = $$props.posts);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [session, posts];
}

class Blog extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Blog",
			options,
			id: create_fragment$1.name
		});
	}
}

var hexToRgb = function hexToRgb (hex) {

  if (hex.charAt && hex.charAt(0) === '#') {
    hex = removeHash(hex);
  }

  if (hex.length === 3) {
    hex = expand(hex);
  }

  var bigint = parseInt(hex, 16);
  var r = (bigint >> 16) & 255;
  var g = (bigint >> 8) & 255;
  var b = bigint & 255;

  return [r, g, b]
};

function removeHash (hex) {

  var arr = hex.split('');
  arr.shift();
  return arr.join('')
}

function expand (hex) {

  return hex
    .split('')
    .reduce(function (accum, value) {

      return accum.concat([value, value])
    }, [])
    .join('')
}

var contrast = function contrast (hex) {
  var rgb = hexToRgb(hex);
  var o = Math.round(((parseInt(rgb[0]) * 299) + (parseInt(rgb[1]) * 587) + (parseInt(rgb[2]) * 114)) /1000);

  return (o <= 180) ? 'dark' : 'light';
};

/* src/components/repos.svelte generated by Svelte v3.19.2 */
const file$2 = "src/components/repos.svelte";

function get_each_context$1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[4] = list[i];
	return child_ctx;
}

// (36:440) {#if item.primaryLanguage}
function create_if_block_2(ctx) {
	let span;
	let t_value = /*item*/ ctx[4].primaryLanguage.name + "";
	let t;

	const block = {
		c: function create() {
			span = element("span");
			t = text(t_value);
			this.h();
		},
		l: function claim(nodes) {
			span = claim_element(nodes, "SPAN", { class: true, style: true });
			var span_nodes = children(span);
			t = claim_text(span_nodes, t_value);
			span_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span, "class", "tag language svelte-zn1rm5");
			set_style(span, "background", /*item*/ ctx[4].primaryLanguage.color);
			set_style(span, "color", /*getContrastColor*/ ctx[2](/*item*/ ctx[4].primaryLanguage));
			add_location(span, file$2, 35, 466, 1460);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			append_dev(span, t);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2.name,
		type: "if",
		source: "(36:440) {#if item.primaryLanguage}",
		ctx
	});

	return block;
}

// (36:630) {#if item.stargazers.totalCount}
function create_if_block_1(ctx) {
	let span2;
	let span0;
	let i;
	let span1;
	let t_value = /*item*/ ctx[4].stargazers.totalCount + "";
	let t;

	const block = {
		c: function create() {
			span2 = element("span");
			span0 = element("span");
			i = element("i");
			span1 = element("span");
			t = text(t_value);
			this.h();
		},
		l: function claim(nodes) {
			span2 = claim_element(nodes, "SPAN", { class: true });
			var span2_nodes = children(span2);
			span0 = claim_element(span2_nodes, "SPAN", { class: true });
			var span0_nodes = children(span0);
			i = claim_element(span0_nodes, "I", { class: true });
			children(i).forEach(detach_dev);
			span0_nodes.forEach(detach_dev);
			span1 = claim_element(span2_nodes, "SPAN", {});
			var span1_nodes = children(span1);
			t = claim_text(span1_nodes, t_value);
			span1_nodes.forEach(detach_dev);
			span2_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(i, "class", "fas fa-star");
			add_location(i, file$2, 35, 705, 1699);
			attr_dev(span0, "class", "icon");
			add_location(span0, file$2, 35, 686, 1680);
			add_location(span1, file$2, 35, 739, 1733);
			attr_dev(span2, "class", "tag stars svelte-zn1rm5");
			add_location(span2, file$2, 35, 662, 1656);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span2, anchor);
			append_dev(span2, span0);
			append_dev(span0, i);
			append_dev(span2, span1);
			append_dev(span1, t);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(span2);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(36:630) {#if item.stargazers.totalCount}",
		ctx
	});

	return block;
}

// (36:792) {#if item.forkCount}
function create_if_block$1(ctx) {
	let span2;
	let span0;
	let i;
	let span1;
	let t_value = /*item*/ ctx[4].forkCount + "";
	let t;

	const block = {
		c: function create() {
			span2 = element("span");
			span0 = element("span");
			i = element("i");
			span1 = element("span");
			t = text(t_value);
			this.h();
		},
		l: function claim(nodes) {
			span2 = claim_element(nodes, "SPAN", { class: true });
			var span2_nodes = children(span2);
			span0 = claim_element(span2_nodes, "SPAN", { class: true });
			var span0_nodes = children(span0);
			i = claim_element(span0_nodes, "I", { class: true });
			children(i).forEach(detach_dev);
			span0_nodes.forEach(detach_dev);
			span1 = claim_element(span2_nodes, "SPAN", {});
			var span1_nodes = children(span1);
			t = claim_text(span1_nodes, t_value);
			span1_nodes.forEach(detach_dev);
			span2_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(i, "class", "fas fa-code-branch");
			add_location(i, file$2, 35, 855, 1849);
			attr_dev(span0, "class", "icon");
			add_location(span0, file$2, 35, 836, 1830);
			add_location(span1, file$2, 35, 896, 1890);
			attr_dev(span2, "class", "tag forks svelte-zn1rm5");
			add_location(span2, file$2, 35, 812, 1806);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span2, anchor);
			append_dev(span2, span0);
			append_dev(span0, i);
			append_dev(span2, span1);
			append_dev(span1, t);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(span2);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$1.name,
		type: "if",
		source: "(36:792) {#if item.forkCount}",
		ctx
	});

	return block;
}

// (36:260) {#each repos as item}
function create_each_block$1(ctx) {
	let li;
	let a;
	let span0;
	let t_value = /*item*/ ctx[4].name + "";
	let t;
	let span1;
	let if_block0_anchor;
	let if_block1_anchor;
	let a_href_value;
	let if_block0 = /*item*/ ctx[4].primaryLanguage && create_if_block_2(ctx);
	let if_block1 = /*item*/ ctx[4].stargazers.totalCount && create_if_block_1(ctx);
	let if_block2 = /*item*/ ctx[4].forkCount && create_if_block$1(ctx);

	const block = {
		c: function create() {
			li = element("li");
			a = element("a");
			span0 = element("span");
			t = text(t_value);
			span1 = element("span");
			if (if_block0) if_block0.c();
			if_block0_anchor = empty();
			if (if_block1) if_block1.c();
			if_block1_anchor = empty();
			if (if_block2) if_block2.c();
			this.h();
		},
		l: function claim(nodes) {
			li = claim_element(nodes, "LI", {});
			var li_nodes = children(li);

			a = claim_element(li_nodes, "A", {
				class: true,
				href: true,
				target: true,
				rel: true
			});

			var a_nodes = children(a);
			span0 = claim_element(a_nodes, "SPAN", { class: true });
			var span0_nodes = children(span0);
			t = claim_text(span0_nodes, t_value);
			span0_nodes.forEach(detach_dev);
			span1 = claim_element(a_nodes, "SPAN", { class: true });
			var span1_nodes = children(span1);
			if (if_block0) if_block0.l(span1_nodes);
			if_block0_anchor = empty();
			if (if_block1) if_block1.l(span1_nodes);
			if_block1_anchor = empty();
			if (if_block2) if_block2.l(span1_nodes);
			span1_nodes.forEach(detach_dev);
			a_nodes.forEach(detach_dev);
			li_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span0, "class", "name");
			add_location(span0, file$2, 35, 383, 1377);
			attr_dev(span1, "class", "badge");
			add_location(span1, file$2, 35, 420, 1414);
			attr_dev(a, "class", "button is-text is-block has-text-left");
			attr_dev(a, "href", a_href_value = /*item*/ ctx[4].url);
			attr_dev(a, "target", "_blank");
			attr_dev(a, "rel", "noopener");
			add_location(a, file$2, 35, 285, 1279);
			add_location(li, file$2, 35, 281, 1275);
		},
		m: function mount(target, anchor) {
			insert_dev(target, li, anchor);
			append_dev(li, a);
			append_dev(a, span0);
			append_dev(span0, t);
			append_dev(a, span1);
			if (if_block0) if_block0.m(span1, null);
			append_dev(span1, if_block0_anchor);
			if (if_block1) if_block1.m(span1, null);
			append_dev(span1, if_block1_anchor);
			if (if_block2) if_block2.m(span1, null);
		},
		p: function update(ctx, dirty) {
			if (/*item*/ ctx[4].primaryLanguage) if_block0.p(ctx, dirty);
			if (/*item*/ ctx[4].stargazers.totalCount) if_block1.p(ctx, dirty);
			if (/*item*/ ctx[4].forkCount) if_block2.p(ctx, dirty);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(li);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			if (if_block2) if_block2.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block$1.name,
		type: "each",
		source: "(36:260) {#each repos as item}",
		ctx
	});

	return block;
}

function create_fragment$2(ctx) {
	let h3;
	let a;
	let span0;
	let i;
	let span1;
	let t;
	let ul;
	let each_value = /*repos*/ ctx[1];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$1(get_each_context$1(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			h3 = element("h3");
			a = element("a");
			span0 = element("span");
			i = element("i");
			span1 = element("span");
			t = text("Repos");
			ul = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			h3 = claim_element(nodes, "H3", {});
			var h3_nodes = children(h3);

			a = claim_element(h3_nodes, "A", {
				class: true,
				href: true,
				target: true,
				rel: true,
				"aria-label": true
			});

			var a_nodes = children(a);
			span0 = claim_element(a_nodes, "SPAN", { class: true, style: true });
			var span0_nodes = children(span0);
			i = claim_element(span0_nodes, "I", { class: true });
			children(i).forEach(detach_dev);
			span0_nodes.forEach(detach_dev);
			span1 = claim_element(a_nodes, "SPAN", {});
			var span1_nodes = children(span1);
			t = claim_text(span1_nodes, "Repos");
			span1_nodes.forEach(detach_dev);
			a_nodes.forEach(detach_dev);
			h3_nodes.forEach(detach_dev);
			ul = claim_element(nodes, "UL", {});
			var ul_nodes = children(ul);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(ul_nodes);
			}

			ul_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(i, "class", "fab fa-github");
			add_location(i, file$2, 35, 193, 1187);
			attr_dev(span0, "class", "icon");
			set_style(span0, "margin-right", "0.5rem");
			add_location(span0, file$2, 35, 145, 1139);
			add_location(span1, file$2, 35, 229, 1223);
			attr_dev(a, "class", "is-size-4 has-text-dark");
			attr_dev(a, "href", "https://github.com/MarcusMathiassen");
			attr_dev(a, "target", "_blank");
			attr_dev(a, "rel", "noopener");
			attr_dev(a, "aria-label", "Checkout my Github");
			add_location(a, file$2, 35, 4, 998);
			add_location(h3, file$2, 35, 0, 994);
			add_location(ul, file$2, 35, 256, 1250);
		},
		m: function mount(target, anchor) {
			insert_dev(target, h3, anchor);
			append_dev(h3, a);
			append_dev(a, span0);
			append_dev(span0, i);
			append_dev(a, span1);
			append_dev(span1, t);
			insert_dev(target, ul, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*repos, getContrastColor*/ 6) {
				each_value = /*repos*/ ctx[1];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$1(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block$1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(ul, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(h3);
			if (detaching) detach_dev(ul);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$2.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$2($$self, $$props, $$invalidate) {
	let $session;
	const { session } = stores$1();
	validate_store(session, "session");
	component_subscribe($$self, session, value => $$invalidate(3, $session = value));
	let repos = $session.repos || null;

	(async () => {
		// // Get repositories from github
		// repos = await cachedFetch('/.netlify/functions/github')
		// // Sort repositories based on star and fork count, with a bias towards forks.
		const starBias = 1.5;

		const forkBias = 2;
		repos.sort((a, b) => b.stargazers.totalCount * starBias + b.forkCount * forkBias - (a.stargazers.totalCount * starBias + a.forkCount * forkBias));
	})();

	const getContrastColor = lang => lang.name === "C"
	? "rgb(var(--text--color-base--dark))"
	: "hsl(0, 0%, 29%)";

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Repos> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Repos", $$slots, []);

	$$self.$capture_state = () => ({
		contrast,
		stores: stores$1,
		session,
		repos,
		getContrastColor,
		$session
	});

	$$self.$inject_state = $$props => {
		if ("repos" in $$props) $$invalidate(1, repos = $$props.repos);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [session, repos, getContrastColor];
}

class Repos extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$2, create_fragment$2, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Repos",
			options,
			id: create_fragment$2.name
		});
	}
}

const cachedFetch = async (root, storage = sessionStorage) => {
    const result = storage.getItem(root);
    if (result !== null) {
        console.log(`getting ${root}... from storage`);
        return JSON.parse(result)
    } else {
        console.log(`getting ${root}... from source`);
        const res = await fetch(root);
        const json = await res.json();
        storage.setItem(root, JSON.stringify(json));
        return json
    }
};

/* src/components/youtube-videos.svelte generated by Svelte v3.19.2 */
const file$3 = "src/components/youtube-videos.svelte";

function get_each_context$2(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[3] = list[i];
	return child_ctx;
}

// (30:496) {#if parseInt(video.statistics.viewCount)}
function create_if_block_2$1(ctx) {
	let span2;
	let span0;
	let i;
	let span1;
	let t_value = /*video*/ ctx[3].statistics.viewCount + "";
	let t;

	const block = {
		c: function create() {
			span2 = element("span");
			span0 = element("span");
			i = element("i");
			span1 = element("span");
			t = text(t_value);
			this.h();
		},
		l: function claim(nodes) {
			span2 = claim_element(nodes, "SPAN", { class: true });
			var span2_nodes = children(span2);
			span0 = claim_element(span2_nodes, "SPAN", { class: true });
			var span0_nodes = children(span0);
			i = claim_element(span0_nodes, "I", { class: true });
			children(i).forEach(detach_dev);
			span0_nodes.forEach(detach_dev);
			span1 = claim_element(span2_nodes, "SPAN", {});
			var span1_nodes = children(span1);
			t = claim_text(span1_nodes, t_value);
			span1_nodes.forEach(detach_dev);
			span2_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(i, "class", "fas fa-user");
			add_location(i, file$3, 29, 595, 1267);
			attr_dev(span0, "class", "icon");
			add_location(span0, file$3, 29, 576, 1248);
			add_location(span1, file$3, 29, 629, 1301);
			attr_dev(span2, "class", "tag views has-text-dark svelte-7rg8kt");
			add_location(span2, file$3, 29, 538, 1210);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span2, anchor);
			append_dev(span2, span0);
			append_dev(span0, i);
			append_dev(span2, span1);
			append_dev(span1, t);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(span2);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2$1.name,
		type: "if",
		source: "(30:496) {#if parseInt(video.statistics.viewCount)}",
		ctx
	});

	return block;
}

// (30:682) {#if parseInt(video.statistics.likeCount)}
function create_if_block_1$1(ctx) {
	let span2;
	let span0;
	let i;
	let span1;
	let t_value = /*video*/ ctx[3].statistics.likeCount + "";
	let t;

	const block = {
		c: function create() {
			span2 = element("span");
			span0 = element("span");
			i = element("i");
			span1 = element("span");
			t = text(t_value);
			this.h();
		},
		l: function claim(nodes) {
			span2 = claim_element(nodes, "SPAN", { class: true });
			var span2_nodes = children(span2);
			span0 = claim_element(span2_nodes, "SPAN", { class: true });
			var span0_nodes = children(span0);
			i = claim_element(span0_nodes, "I", { class: true });
			children(i).forEach(detach_dev);
			span0_nodes.forEach(detach_dev);
			span1 = claim_element(span2_nodes, "SPAN", {});
			var span1_nodes = children(span1);
			t = claim_text(span1_nodes, t_value);
			span1_nodes.forEach(detach_dev);
			span2_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(i, "class", "fas fa-heart");
			add_location(i, file$3, 29, 782, 1454);
			attr_dev(span0, "class", "icon");
			add_location(span0, file$3, 29, 763, 1435);
			add_location(span1, file$3, 29, 817, 1489);
			attr_dev(span2, "class", "tag likes has-text-light svelte-7rg8kt");
			add_location(span2, file$3, 29, 724, 1396);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span2, anchor);
			append_dev(span2, span0);
			append_dev(span0, i);
			append_dev(span2, span1);
			append_dev(span1, t);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(span2);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1$1.name,
		type: "if",
		source: "(30:682) {#if parseInt(video.statistics.likeCount)}",
		ctx
	});

	return block;
}

// (30:870) {#if parseInt(video.statistics.commentCount)}
function create_if_block$2(ctx) {
	let span2;
	let span0;
	let i;
	let span1;
	let t_value = /*video*/ ctx[3].statistics.commentCount + "";
	let t;

	const block = {
		c: function create() {
			span2 = element("span");
			span0 = element("span");
			i = element("i");
			span1 = element("span");
			t = text(t_value);
			this.h();
		},
		l: function claim(nodes) {
			span2 = claim_element(nodes, "SPAN", { class: true });
			var span2_nodes = children(span2);
			span0 = claim_element(span2_nodes, "SPAN", { class: true });
			var span0_nodes = children(span0);
			i = claim_element(span0_nodes, "I", { class: true });
			children(i).forEach(detach_dev);
			span0_nodes.forEach(detach_dev);
			span1 = claim_element(span2_nodes, "SPAN", {});
			var span1_nodes = children(span1);
			t = claim_text(span1_nodes, t_value);
			span1_nodes.forEach(detach_dev);
			span2_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(i, "class", "fas fa-comment");
			add_location(i, file$3, 29, 976, 1648);
			attr_dev(span0, "class", "icon");
			add_location(span0, file$3, 29, 957, 1629);
			add_location(span1, file$3, 29, 1013, 1685);
			attr_dev(span2, "class", "tag comments has-text-light svelte-7rg8kt");
			add_location(span2, file$3, 29, 915, 1587);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span2, anchor);
			append_dev(span2, span0);
			append_dev(span0, i);
			append_dev(span2, span1);
			append_dev(span1, t);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(span2);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$2.name,
		type: "if",
		source: "(30:870) {#if parseInt(video.statistics.commentCount)}",
		ctx
	});

	return block;
}

// (30:280) {#each videos as video}
function create_each_block$2(ctx) {
	let li;
	let a;
	let span0;
	let t_value = /*video*/ ctx[3].title + "";
	let t;
	let span1;
	let show_if_2 = parseInt(/*video*/ ctx[3].statistics.viewCount);
	let if_block0_anchor;
	let show_if_1 = parseInt(/*video*/ ctx[3].statistics.likeCount);
	let if_block1_anchor;
	let show_if = parseInt(/*video*/ ctx[3].statistics.commentCount);
	let a_href_value;
	let if_block0 = show_if_2 && create_if_block_2$1(ctx);
	let if_block1 = show_if_1 && create_if_block_1$1(ctx);
	let if_block2 = show_if && create_if_block$2(ctx);

	const block = {
		c: function create() {
			li = element("li");
			a = element("a");
			span0 = element("span");
			t = text(t_value);
			span1 = element("span");
			if (if_block0) if_block0.c();
			if_block0_anchor = empty();
			if (if_block1) if_block1.c();
			if_block1_anchor = empty();
			if (if_block2) if_block2.c();
			this.h();
		},
		l: function claim(nodes) {
			li = claim_element(nodes, "LI", {});
			var li_nodes = children(li);

			a = claim_element(li_nodes, "A", {
				class: true,
				href: true,
				target: true,
				rel: true
			});

			var a_nodes = children(a);
			span0 = claim_element(a_nodes, "SPAN", { class: true });
			var span0_nodes = children(span0);
			t = claim_text(span0_nodes, t_value);
			span0_nodes.forEach(detach_dev);
			span1 = claim_element(a_nodes, "SPAN", { class: true });
			var span1_nodes = children(span1);
			if (if_block0) if_block0.l(span1_nodes);
			if_block0_anchor = empty();
			if (if_block1) if_block1.l(span1_nodes);
			if_block1_anchor = empty();
			if (if_block2) if_block2.l(span1_nodes);
			span1_nodes.forEach(detach_dev);
			a_nodes.forEach(detach_dev);
			li_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span0, "class", "name");
			add_location(span0, file$3, 29, 437, 1109);
			attr_dev(span1, "class", "badge");
			add_location(span1, file$3, 29, 476, 1148);
			attr_dev(a, "class", "button is-text is-block has-text-left");
			attr_dev(a, "href", a_href_value = "https://www.youtube.com/watch?v=" + /*video*/ ctx[3].id);
			attr_dev(a, "target", "_blank");
			attr_dev(a, "rel", "noopener");
			add_location(a, file$3, 29, 307, 979);
			add_location(li, file$3, 29, 303, 975);
		},
		m: function mount(target, anchor) {
			insert_dev(target, li, anchor);
			append_dev(li, a);
			append_dev(a, span0);
			append_dev(span0, t);
			append_dev(a, span1);
			if (if_block0) if_block0.m(span1, null);
			append_dev(span1, if_block0_anchor);
			if (if_block1) if_block1.m(span1, null);
			append_dev(span1, if_block1_anchor);
			if (if_block2) if_block2.m(span1, null);
		},
		p: function update(ctx, dirty) {
			if (show_if_2) if_block0.p(ctx, dirty);
			if (show_if_1) if_block1.p(ctx, dirty);
			if (show_if) if_block2.p(ctx, dirty);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(li);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			if (if_block2) if_block2.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block$2.name,
		type: "each",
		source: "(30:280) {#each videos as video}",
		ctx
	});

	return block;
}

function create_fragment$3(ctx) {
	let h3;
	let a;
	let span0;
	let i;
	let span1;
	let t;
	let ul;
	let each_value = /*videos*/ ctx[1];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$2(get_each_context$2(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			h3 = element("h3");
			a = element("a");
			span0 = element("span");
			i = element("i");
			span1 = element("span");
			t = text("Videos");
			ul = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			h3 = claim_element(nodes, "H3", {});
			var h3_nodes = children(h3);

			a = claim_element(h3_nodes, "A", {
				class: true,
				href: true,
				target: true,
				rel: true,
				"aria-label": true
			});

			var a_nodes = children(a);
			span0 = claim_element(a_nodes, "SPAN", { class: true, style: true });
			var span0_nodes = children(span0);
			i = claim_element(span0_nodes, "I", { class: true });
			children(i).forEach(detach_dev);
			span0_nodes.forEach(detach_dev);
			span1 = claim_element(a_nodes, "SPAN", {});
			var span1_nodes = children(span1);
			t = claim_text(span1_nodes, "Videos");
			span1_nodes.forEach(detach_dev);
			a_nodes.forEach(detach_dev);
			h3_nodes.forEach(detach_dev);
			ul = claim_element(nodes, "UL", {});
			var ul_nodes = children(ul);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(ul_nodes);
			}

			ul_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(i, "class", "fab fa-youtube");
			add_location(i, file$3, 29, 211, 883);
			attr_dev(span0, "class", "icon");
			set_style(span0, "margin-right", "0.5rem");
			add_location(span0, file$3, 29, 163, 835);
			add_location(span1, file$3, 29, 248, 920);
			attr_dev(a, "class", "is-size-4 has-text-dark");
			attr_dev(a, "href", "https://www.youtube.com/user/MathiassenMarcus/videos");
			attr_dev(a, "target", "_blank");
			attr_dev(a, "rel", "noopener");
			attr_dev(a, "aria-label", "Checkout my YouTube");
			add_location(a, file$3, 29, 4, 676);
			add_location(h3, file$3, 29, 0, 672);
			add_location(ul, file$3, 29, 276, 948);
		},
		m: function mount(target, anchor) {
			insert_dev(target, h3, anchor);
			append_dev(h3, a);
			append_dev(a, span0);
			append_dev(span0, i);
			append_dev(a, span1);
			append_dev(span1, t);
			insert_dev(target, ul, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*videos, parseInt*/ 2) {
				each_value = /*videos*/ ctx[1];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$2(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block$2(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(ul, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(h3);
			if (detaching) detach_dev(ul);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$3.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$3($$self, $$props, $$invalidate) {
	let $session;
	const { session } = stores$1();
	validate_store(session, "session");
	component_subscribe($$self, session, value => $$invalidate(2, $session = value));
	let videos = $session.videos || null;

	(async () => {
		// videos = await cachedFetch('/.netlify/functions/youtube')
		videos.sort((a, b) => b.statistics.viewCount - a.statistics.viewCount);
	})();

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Youtube_videos> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Youtube_videos", $$slots, []);

	$$self.$capture_state = () => ({
		onMount,
		cachedFetch,
		stores: stores$1,
		session,
		videos,
		$session
	});

	$$self.$inject_state = $$props => {
		if ("videos" in $$props) $$invalidate(1, videos = $$props.videos);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [session, videos];
}

class Youtube_videos extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$3, create_fragment$3, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Youtube_videos",
			options,
			id: create_fragment$3.name
		});
	}
}

/* src/routes/index.svelte generated by Svelte v3.19.2 */
const file$4 = "src/routes/index.svelte";

function get_each_context$3(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[1] = list[i];
	return child_ctx;
}

// (11:141) {#each components as component}
function create_each_block$3(ctx) {
	let div;
	let current;
	var switch_value = /*component*/ ctx[1];

	function switch_props(ctx) {
		return { $$inline: true };
	}

	if (switch_value) {
		var switch_instance = new switch_value(switch_props());
	}

	const block = {
		c: function create() {
			div = element("div");
			if (switch_instance) create_component(switch_instance.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			if (switch_instance) claim_component(switch_instance.$$.fragment, div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", "column is-narrow");
			add_location(div, file$4, 10, 172, 449);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);

			if (switch_instance) {
				mount_component(switch_instance, div, null);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (switch_value !== (switch_value = /*component*/ ctx[1])) {
				if (switch_instance) {
					group_outros();
					const old_component = switch_instance;

					transition_out(old_component.$$.fragment, 1, 0, () => {
						destroy_component(old_component, 1);
					});

					check_outros();
				}

				if (switch_value) {
					switch_instance = new switch_value(switch_props());
					create_component(switch_instance.$$.fragment);
					transition_in(switch_instance.$$.fragment, 1);
					mount_component(switch_instance, div, null);
				} else {
					switch_instance = null;
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if (switch_instance) destroy_component(switch_instance);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block$3.name,
		type: "each",
		source: "(11:141) {#each components as component}",
		ctx
	});

	return block;
}

function create_fragment$4(ctx) {
	let section;
	let div;
	let current;
	const hero = new Hero({ $$inline: true });
	let each_value = /*components*/ ctx[0];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$3(get_each_context$3(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	const block = {
		c: function create() {
			create_component(hero.$$.fragment);
			section = element("section");
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-ytzzes\"]", document.head);
			head_nodes.forEach(detach_dev);
			claim_component(hero.$$.fragment, nodes);
			section = claim_element(nodes, "SECTION", { class: true });
			var section_nodes = children(section);
			div = claim_element(section_nodes, "DIV", { class: true });
			var div_nodes = children(div);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div_nodes);
			}

			div_nodes.forEach(detach_dev);
			section_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			document.title = "Marcus Mathiassen - Homepage";
			attr_dev(div, "class", "columns is-centered");
			add_location(div, file$4, 10, 108, 385);
			attr_dev(section, "class", "section");
			add_location(section, file$4, 10, 83, 360);
		},
		m: function mount(target, anchor) {
			mount_component(hero, target, anchor);
			insert_dev(target, section, anchor);
			append_dev(section, div);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}

			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*components*/ 1) {
				each_value = /*components*/ ctx[0];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$3(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block$3(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(div, null);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(hero.$$.fragment, local);

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			transition_out(hero.$$.fragment, local);
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(hero, detaching);
			if (detaching) detach_dev(section);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$4.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$4($$self, $$props, $$invalidate) {
	const components = [Blog, Repos, Youtube_videos];
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Routes> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Routes", $$slots, []);
	$$self.$capture_state = () => ({ Hero, Blog, Repos, Videos: Youtube_videos, components });
	return [components];
}

class Routes extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$4, create_fragment$4, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Routes",
			options,
			id: create_fragment$4.name
		});
	}
}

export default Routes;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
