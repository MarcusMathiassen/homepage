(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["blog"],{

/***/ "./src/components/p2d.svelte":
/*!***********************************!*\
  !*** ./src/components/p2d.svelte ***!
  \***********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var svelte_internal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! svelte/internal */ "./node_modules/svelte/internal/index.mjs");
/* harmony import */ var svelte__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! svelte */ "./node_modules/svelte/index.mjs");
/* harmony import */ var _utils_query__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/query */ "./src/components/utils/query.js");
/* harmony import */ var _utils_particle__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/particle */ "./src/components/utils/particle.js");
/* harmony import */ var _utils_math__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils/math */ "./src/components/utils/math.js");
/* harmony import */ var _utils_utility__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils/utility */ "./src/components/utils/utility.js");
/* harmony import */ var _utils_quadtree__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./utils/quadtree */ "./src/components/utils/quadtree.js");
/* src/components/p2d.svelte generated by Svelte v3.12.1 */








const file = "src/components/p2d.svelte";

function create_fragment(ctx) {
	var h1, t0, div1, div0, p0, t1, p1, t2, b, t3, div2, p2, t4, p3, t5, div3, p4, t6, p5, t7, div4, p6, t8, p7, t9, div5, p8, t10, p9, t11;

	const block = {
		c: function create() {
			h1 = Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["element"])("h1");
			t0 = Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["text"])("2D Collisions");
			div1 = Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["element"])("div");
			div0 = Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["element"])("div");
			p0 = Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["element"])("p");
			t1 = Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["text"])("Any performance issue at this point is actually from the drawing of the particles.\nIt doesnt cache the vertices, so it calculates them each frame via an immidiate mode api.");
			p1 = Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["element"])("p");
			t2 = Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["text"])("This is a test paragraf.");
			b = Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["element"])("b");
			t3 = Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["text"])("I am bold");
			div2 = Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["element"])("div");
			p2 = Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["element"])("p");
			t4 = Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["text"])("This is a info note.\nThey can be recognized by their\ngray label.");
			p3 = Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["element"])("p");
			t5 = Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["text"])("Not really sure what i will use them for, but\ni needed something else that just advice.");
			div3 = Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["element"])("div");
			p4 = Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["element"])("p");
			t6 = Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["text"])("This is an advice note.\nThey can be recognized by their\ngreen label.");
			p5 = Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["element"])("p");
			t7 = Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["text"])("Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna\naliqua. Porttitor eget dolor morbi non arcu risus. Egestas integer eget aliquet nibh praesent tristique magna sit.\nSollicitudin nibh sit amet commodo nulla. Lobortis feugiat vivamus at augue eget arcu dictum. Pellentesque pulvinar\npellentesque habitant morbi tristique senectus et netus. Nunc sed id semper risus in hendrerit gravida. Pellentesque\nmassa placerat duis ultricies. Massa tincidunt nunc pulvinar sapien et. Mauris cursus mattis molestie a iaculis at erat");
			div4 = Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["element"])("div");
			p6 = Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["element"])("p");
			t8 = Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["text"])("This is a warning note.\nThese will be used to put emphasis on dangerous or unsafe things.\nThey can be recognized by their\norange label.\n");
			p7 = Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["element"])("p");
			t9 = Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["text"])("pellentesque. Ligula ullamcorper malesuada proin libero nunc consequat interdum varius sit. Quis commodo odio aenean sed\nadipiscing diam donec. Adipiscing at in tellus integer feugiat scelerisque varius morbi enim. Bibendum at varius vel\npharetra vel turpis. Cras sed felis eget velit aliquet. Quis hendrerit dolor magna eget est. Elit ut aliquam purus sit\namet luctus venenatis. Sem viverra aliquet eget sit amet tellus cras adipiscing. Metus aliquam eleifend mi in nulla\nposuere sollicitudin. Egestas sed sed risus pretium quam.");
			div5 = Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["element"])("div");
			p8 = Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["element"])("p");
			t10 = Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["text"])("Any performance issue at this point is actually from the drawing of the particles.\nIt doesnt cache the vertices, so it calculates them each frame via an immidiate mode api.\nIt doesnt cache the vertices, so it calculates them each frame via an immidiate mode api.");
			p9 = Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["element"])("p");
			t11 = Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["text"])("Vel risus commodo viverra maecenas accumsan. Quam pellentesque nec nam aliquam. Porttitor rhoncus dolor purus non enim\npraesent. Ac odio tempor orci dapibus ultrices in iaculis. Sit amet cursus sit amet dictum sit amet. Felis imperdiet\nproin fermentum leo. Adipiscing at in tellus integer. Amet commodo nulla facilisi nullam vehicula ipsum a arcu cursus.\nSed libero enim sed faucibus turpis in eu mi bibendum. Rhoncus urna neque viverra justo. Ultrices vitae auctor eu augue.\nTristique nulla aliquet enim tortor. Nunc non blandit massa enim nec dui nunc. Laoreet sit amet cursus sit amet dictum.\nElit ullamcorper dignissim cras tincidunt lobortis feugiat vivamus.");
			this.h()
		},

		l: function claim(nodes) {
			h1 = Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["claim_element"])(nodes, "H1", {}, false);
			var h1_nodes = Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["children"])(h1);

			t0 = Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["claim_text"])(h1_nodes, "2D Collisions");
			h1_nodes.forEach(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["detach_dev"]);

			div1 = Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["claim_element"])(nodes, "DIV", { id: true }, false);
			var div1_nodes = Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["children"])(div1);

			div0 = Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["claim_element"])(div1_nodes, "DIV", { class: true }, false);
			var div0_nodes = Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["children"])(div0);

			p0 = Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["claim_element"])(div0_nodes, "P", {}, false);
			var p0_nodes = Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["children"])(p0);

			t1 = Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["claim_text"])(p0_nodes, "Any performance issue at this point is actually from the drawing of the particles.\nIt doesnt cache the vertices, so it calculates them each frame via an immidiate mode api.");
			p0_nodes.forEach(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["detach_dev"]);
			div0_nodes.forEach(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["detach_dev"]);
			div1_nodes.forEach(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["detach_dev"]);

			p1 = Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["claim_element"])(nodes, "P", {}, false);
			var p1_nodes = Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["children"])(p1);

			t2 = Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["claim_text"])(p1_nodes, "This is a test paragraf.");

			b = Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["claim_element"])(p1_nodes, "B", {}, false);
			var b_nodes = Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["children"])(b);

			t3 = Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["claim_text"])(b_nodes, "I am bold");
			b_nodes.forEach(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["detach_dev"]);
			p1_nodes.forEach(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["detach_dev"]);

			div2 = Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["claim_element"])(nodes, "DIV", { class: true }, false);
			var div2_nodes = Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["children"])(div2);

			p2 = Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["claim_element"])(div2_nodes, "P", {}, false);
			var p2_nodes = Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["children"])(p2);

			t4 = Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["claim_text"])(p2_nodes, "This is a info note.\nThey can be recognized by their\ngray label.");
			p2_nodes.forEach(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["detach_dev"]);

			p3 = Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["claim_element"])(div2_nodes, "P", {}, false);
			var p3_nodes = Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["children"])(p3);

			t5 = Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["claim_text"])(p3_nodes, "Not really sure what i will use them for, but\ni needed something else that just advice.");
			p3_nodes.forEach(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["detach_dev"]);
			div2_nodes.forEach(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["detach_dev"]);

			div3 = Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["claim_element"])(nodes, "DIV", { class: true }, false);
			var div3_nodes = Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["children"])(div3);

			p4 = Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["claim_element"])(div3_nodes, "P", {}, false);
			var p4_nodes = Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["children"])(p4);

			t6 = Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["claim_text"])(p4_nodes, "This is an advice note.\nThey can be recognized by their\ngreen label.");
			p4_nodes.forEach(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["detach_dev"]);
			div3_nodes.forEach(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["detach_dev"]);

			p5 = Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["claim_element"])(nodes, "P", {}, false);
			var p5_nodes = Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["children"])(p5);

			t7 = Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["claim_text"])(p5_nodes, "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna\naliqua. Porttitor eget dolor morbi non arcu risus. Egestas integer eget aliquet nibh praesent tristique magna sit.\nSollicitudin nibh sit amet commodo nulla. Lobortis feugiat vivamus at augue eget arcu dictum. Pellentesque pulvinar\npellentesque habitant morbi tristique senectus et netus. Nunc sed id semper risus in hendrerit gravida. Pellentesque\nmassa placerat duis ultricies. Massa tincidunt nunc pulvinar sapien et. Mauris cursus mattis molestie a iaculis at erat");
			p5_nodes.forEach(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["detach_dev"]);

			div4 = Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["claim_element"])(nodes, "DIV", { class: true }, false);
			var div4_nodes = Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["children"])(div4);

			p6 = Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["claim_element"])(div4_nodes, "P", {}, false);
			var p6_nodes = Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["children"])(p6);

			t8 = Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["claim_text"])(p6_nodes, "This is a warning note.\nThese will be used to put emphasis on dangerous or unsafe things.\nThey can be recognized by their\norange label.\n");
			p6_nodes.forEach(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["detach_dev"]);
			div4_nodes.forEach(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["detach_dev"]);

			p7 = Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["claim_element"])(nodes, "P", {}, false);
			var p7_nodes = Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["children"])(p7);

			t9 = Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["claim_text"])(p7_nodes, "pellentesque. Ligula ullamcorper malesuada proin libero nunc consequat interdum varius sit. Quis commodo odio aenean sed\nadipiscing diam donec. Adipiscing at in tellus integer feugiat scelerisque varius morbi enim. Bibendum at varius vel\npharetra vel turpis. Cras sed felis eget velit aliquet. Quis hendrerit dolor magna eget est. Elit ut aliquam purus sit\namet luctus venenatis. Sem viverra aliquet eget sit amet tellus cras adipiscing. Metus aliquam eleifend mi in nulla\nposuere sollicitudin. Egestas sed sed risus pretium quam.");
			p7_nodes.forEach(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["detach_dev"]);

			div5 = Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["claim_element"])(nodes, "DIV", { class: true }, false);
			var div5_nodes = Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["children"])(div5);

			p8 = Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["claim_element"])(div5_nodes, "P", {}, false);
			var p8_nodes = Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["children"])(p8);

			t10 = Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["claim_text"])(p8_nodes, "Any performance issue at this point is actually from the drawing of the particles.\nIt doesnt cache the vertices, so it calculates them each frame via an immidiate mode api.\nIt doesnt cache the vertices, so it calculates them each frame via an immidiate mode api.");
			p8_nodes.forEach(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["detach_dev"]);
			div5_nodes.forEach(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["detach_dev"]);

			p9 = Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["claim_element"])(nodes, "P", {}, false);
			var p9_nodes = Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["children"])(p9);

			t11 = Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["claim_text"])(p9_nodes, "Vel risus commodo viverra maecenas accumsan. Quam pellentesque nec nam aliquam. Porttitor rhoncus dolor purus non enim\npraesent. Ac odio tempor orci dapibus ultrices in iaculis. Sit amet cursus sit amet dictum sit amet. Felis imperdiet\nproin fermentum leo. Adipiscing at in tellus integer. Amet commodo nulla facilisi nullam vehicula ipsum a arcu cursus.\nSed libero enim sed faucibus turpis in eu mi bibendum. Rhoncus urna neque viverra justo. Ultrices vitae auctor eu augue.\nTristique nulla aliquet enim tortor. Nunc non blandit massa enim nec dui nunc. Laoreet sit amet cursus sit amet dictum.\nElit ullamcorper dignissim cras tincidunt lobortis feugiat vivamus.");
			p9_nodes.forEach(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["detach_dev"]);
			this.h();
		},

		h: function hydrate() {
			Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["add_location"])(h1, file, 0, 0, 0);
			Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["add_location"])(p0, file, 0, 62, 62);
			Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["attr_dev"])(div0, "class", "comment info");
			Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["add_location"])(div0, file, 0, 36, 36);
			Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["attr_dev"])(div1, "id", "p2d");
			Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["add_location"])(div1, file, 0, 22, 22);
			Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["add_location"])(b, file, 1, 132, 280);
			Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["add_location"])(p1, file, 1, 105, 253);
			Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["add_location"])(p2, file, 1, 178, 326);
			Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["add_location"])(p3, file, 3, 15, 397);
			Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["attr_dev"])(div2, "class", "comment info");
			Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["add_location"])(div2, file, 1, 152, 300);
			Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["add_location"])(p4, file, 4, 79, 525);
			Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["attr_dev"])(div3, "class", "comment advice");
			Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["add_location"])(div3, file, 4, 51, 497);
			Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["add_location"])(p5, file, 6, 22, 606);
			Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["add_location"])(p6, file, 10, 152, 1225);
			Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["attr_dev"])(div4, "class", "comment warning");
			Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["add_location"])(div4, file, 10, 123, 1196);
			Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["add_location"])(p7, file, 14, 10, 1374);
			Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["add_location"])(p8, file, 18, 89, 1939);
			Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["attr_dev"])(div5, "class", "comment advice");
			Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["add_location"])(div5, file, 18, 61, 1911);
			Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["add_location"])(p9, file, 20, 99, 2214);
		},

		m: function mount(target, anchor) {
			Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["insert_dev"])(target, h1, anchor);
			Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["append_dev"])(h1, t0);
			Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["insert_dev"])(target, div1, anchor);
			Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["append_dev"])(div1, div0);
			Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["append_dev"])(div0, p0);
			Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["append_dev"])(p0, t1);
			Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["insert_dev"])(target, p1, anchor);
			Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["append_dev"])(p1, t2);
			Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["append_dev"])(p1, b);
			Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["append_dev"])(b, t3);
			Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["insert_dev"])(target, div2, anchor);
			Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["append_dev"])(div2, p2);
			Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["append_dev"])(p2, t4);
			Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["append_dev"])(div2, p3);
			Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["append_dev"])(p3, t5);
			Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["insert_dev"])(target, div3, anchor);
			Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["append_dev"])(div3, p4);
			Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["append_dev"])(p4, t6);
			Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["insert_dev"])(target, p5, anchor);
			Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["append_dev"])(p5, t7);
			Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["insert_dev"])(target, div4, anchor);
			Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["append_dev"])(div4, p6);
			Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["append_dev"])(p6, t8);
			Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["insert_dev"])(target, p7, anchor);
			Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["append_dev"])(p7, t9);
			Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["insert_dev"])(target, div5, anchor);
			Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["append_dev"])(div5, p8);
			Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["append_dev"])(p8, t10);
			Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["insert_dev"])(target, p9, anchor);
			Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["append_dev"])(p9, t11);
		},

		p: svelte_internal__WEBPACK_IMPORTED_MODULE_0__["noop"],
		i: svelte_internal__WEBPACK_IMPORTED_MODULE_0__["noop"],
		o: svelte_internal__WEBPACK_IMPORTED_MODULE_0__["noop"],

		d: function destroy(detaching) {
			if (detaching) {
				Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["detach_dev"])(h1);
				Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["detach_dev"])(div1);
				Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["detach_dev"])(p1);
				Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["detach_dev"])(div2);
				Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["detach_dev"])(div3);
				Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["detach_dev"])(p5);
				Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["detach_dev"])(div4);
				Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["detach_dev"])(p7);
				Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["detach_dev"])(div5);
				Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["detach_dev"])(p9);
			}
		}
	};
	Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["dispatch_dev"])("SvelteRegisterBlock", { block, id: create_fragment.name, type: "component", source: "", ctx });
	return block;
}

function instance($$self) {
	

    Object(svelte__WEBPACK_IMPORTED_MODULE_1__["onMount"])(() => {
        const id = "p2d"

        let vertices = []

        let viewportSize = 0

        let gAttribLocationProjMtx

        let parent
        let gl

        let vao
        let vbo
        let program

        let positionAttribLocation = 0
        let colorAttribLocation = 1

        let focused = false

        let comparisons = 0
        let hits = 0

        let devicePixelRatio

        let tree = []
        let backColor = { r: 255, g: 255, b: 255 }
        let frontColor = { r: 255, g: 0, b: 255 }
        let canvasWidth = 300
        let canvasHeight = 300
        let canvas
        let ui

        let enableCollision = true
        let showNodes = false
        let useQuadtree = true
        let useOptimizedBounds = true
        let showNeighbours = true
        let paused = false
        let showInfopanel = false
        let enableGravity = false

        let quadtreeBounds
        let allBounds = []

        let lastFps = 60
        let lastTime = 0

        let mouse = {
            x: 0,
            y: 0,
        }

        let particles = []
        let particleColors = []
        let particleSize = 8
        let particleColor = { r: 0, g: 0, b: 0, a: 1 }

        let boundsHighlightColor = { r: 0, g: 1, b: 0, a: 1 }
        let highlightColor = { r: 1, g: 1, b: 0, a: 1 }

        let mousedown = false

        const el = Object(_utils_query__WEBPACK_IMPORTED_MODULE_2__["default"])('<canvas>')
        canvas = el
        el.id = `${id}-canvas`
        el.textContent = 'webgl canvas placeholder'

        parent = Object(_utils_query__WEBPACK_IMPORTED_MODULE_2__["default"])(`#${id}`)
        parent.appendChild(el)

        canvas.addEventListener('mouseenter', () => (focused = !focused))
        canvas.addEventListener('mouseleave', () => (focused = !focused))

        canvas.addEventListener('mousemove', (ev) => {
            updateMousePos(ev)
            if (mousedown) spawnParticle()
        })

        canvas.addEventListener('mousedown', () => mousedown = true)
        canvas.addEventListener('mouseup', () => mousedown = false)


        const div = Object(_utils_query__WEBPACK_IMPORTED_MODULE_2__["default"])('<div>')
        div.id = `${parent.id}-settings`
        parent.append(div)

        // setInterval(updateUI, 1000)

        // addUI()

        Object(_utils_utility__WEBPACK_IMPORTED_MODULE_5__["addButton"])({
            label: 'clear',
            className: 'btn small',
            callback: erase,
            parent: div.id,
        })

        Object(_utils_utility__WEBPACK_IMPORTED_MODULE_5__["addButton"])({
            label: 'show neighbours',
            className: 'btn small',
            callback: () => {
                showNeighbours = !showNeighbours
            },
            parent: div.id,
        })

        Object(_utils_utility__WEBPACK_IMPORTED_MODULE_5__["addButton"])({
            label: 'quadtree',
            className: 'btn small',
            callback: () => {
                useQuadtree ^= 1
            },
            parent: div.id,
        })
        Object(_utils_utility__WEBPACK_IMPORTED_MODULE_5__["addButton"])({
            label: 'optimized quadtree bounds',
            className: 'btn small',
            callback: () => {
                useOptimizedBounds ^= 1
            },
            parent: div.id,
        })
        Object(_utils_utility__WEBPACK_IMPORTED_MODULE_5__["addButton"])({
            label: 'show quadtree nodes',
            className: 'btn small',
            callback: () => {
                showNodes ^= 1
            },
            parent: div.id,
        })
        Object(_utils_utility__WEBPACK_IMPORTED_MODULE_5__["addButton"])({
            label: 'collisions',
            className: 'btn small',
            callback: () => {
                enableCollision ^= 1
            },
            parent: div.id,
        })
        Object(_utils_utility__WEBPACK_IMPORTED_MODULE_5__["addButton"])({
            label: 'gravity',
            className: 'btn small',
            callback: () => {
                enableGravity ^= 1
            },
            parent: div.id,
        })
        Object(_utils_utility__WEBPACK_IMPORTED_MODULE_5__["addButton"])({
            label: 'info',
            className: 'btn small',
            callback: () => {
                showInfopanel ^= 1
            },
            parent: div.id,
        })
        Object(_utils_utility__WEBPACK_IMPORTED_MODULE_5__["addButton"])({
            label: 'pause',
            className: 'btn small',
            callback: () => {
                paused ^= 1
            },
            parent: div.id,
        })

        gl = canvas.getContext('webgl2')

        if (!gl) {
            alert(
                'Unable to initialize WebGL. Your browser may not support it.'
            )
            return
        }

        gl.enable(gl.BLEND)
        gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA)

        program = gl.createProgram()
        let vs = gl.createShader(gl.VERTEX_SHADER)
        let fs = gl.createShader(gl.FRAGMENT_SHADER)

        let vs_src = `
        precision mediump float;

        uniform mat4 projectionMatrix;
        attribute vec2 position;
        attribute vec4 color;

        varying vec4 color0;

        void main() {
            gl_Position = projectionMatrix * vec4(position, 0.0, 1.0);
            color0 = color;
        }
        `

        let fs_src = `
        precision mediump float;
        varying vec4 color0;
        void main() {
          gl_FragColor = color0;
        }`

        gl.shaderSource(vs, vs_src)
        gl.shaderSource(fs, fs_src)

        gl.compileShader(vs)
        if (!gl.getShaderParameter(vs, gl.COMPILE_STATUS)) {
            console.error(
                'ERROR compiling vertex shader!',
                gl.getShaderInfoLog(vs)
            )
            return
        }

        gl.compileShader(fs)
        if (!gl.getShaderParameter(fs, gl.COMPILE_STATUS)) {
            console.error(
                'ERROR compiling fragment shader!',
                gl.getShaderInfoLog(fs)
            )
            return
        }

        gl.attachShader(program, vs)
        gl.attachShader(program, fs)

        gl.bindAttribLocation(program, positionAttribLocation, 'position')
        gl.bindAttribLocation(program, colorAttribLocation, 'color')

        gl.linkProgram(program)
        gl.validateProgram(program)

        gAttribLocationProjMtx = gl.getUniformLocation(
            program,
            'projectionMatrix'
        )

        gl.deleteShader(vs)
        gl.deleteShader(fs)

        vao = gl.createVertexArray()
        gl.bindVertexArray(vao)

        vbo = gl.createBuffer()
        gl.bindBuffer(gl.ARRAY_BUFFER, vbo)

        gl.vertexAttribPointer(
            positionAttribLocation,
            2,
            gl.FLOAT,
            gl.FALSE,
            6 * Float32Array.BYTES_PER_ELEMENT,
            0
        )
        gl.vertexAttribPointer(
            colorAttribLocation,
            4,
            gl.FLOAT,
            gl.FALSE,
            6 * Float32Array.BYTES_PER_ELEMENT,
            2 * Float32Array.BYTES_PER_ELEMENT
        )

        gl.enableVertexAttribArray(positionAttribLocation)
        gl.enableVertexAttribArray(colorAttribLocation)

        const resolveCollisions = particles => {
            let comparisons = 0
            let hits = 0
            const particleCount = particles.length
            for (let i = 0; i < particleCount; i++) {
                for (let j = i + 1; j < particleCount; j++) {
                    if (particles[i].collidesWith(particles[j])) {
                        particles[i].resolveCollision(particles[j])
                        hits++
                    }
                    comparisons++
                }
            }

            return {
                comparisons: comparisons,
                hits: hits,
            }
        }

        const resolveCollisionsQuadtree = (particles, tree) => {
            let comparisons = 0
            let hits = 0
            for (const node of tree) {
                const nodeCount = node.length
                for (let i = 0; i < nodeCount; i++) {
                    for (let j = i + 1; j < nodeCount; j++) {
                        if (particles[node[i]].collidesWith(particles[node[j]])) {
                            particles[node[i]].resolveCollision(particles[node[j]])
                            hits++
                        }
                        comparisons++
                    }
                }
            }
            return {
                comparisons: comparisons,
                hits: hits,
            }
        }

        const extractRGB = str => {
            const rgb = str
                .substring(4, str.length - 1)
                .replace(/ /g, '')
                .split(',')

            return {
                r: rgb[0],
                g: rgb[1],
                b: rgb[2],
            }
        }

        const normalize = rgba => {
            return {
                r: rgba.r / 255,
                g: rgba.g / 255,
                b: rgba.b / 255,
                a: rgba.a || rgba.a / 255,
            }
        }

        const drawTriangle = (positions, color, size) => {
            addVertices([
                -size + positions.x,
                -size + positions.y,
                color.r,
                color.g,
                color.b,
                color.a,
                positions.x,
                size + positions.y,
                color.r,
                color.g,
                color.b,
                color.a,
                size + positions.x,
                -size + positions.y,
                color.r,
                color.g,
                color.b,
                color.a,
            ])
        }

        const drawRectRange = (min, max, color) => {
            addVertices([
                min.x,
                max.y,
                color.r,
                color.g,
                color.b,
                color.a,
                max.x,
                max.y,
                color.r,
                color.g,
                color.b,
                color.a,
                max.x,
                min.y,
                color.r,
                color.g,
                color.b,
                color.a,

                min.x,
                max.y,
                color.r,
                color.g,
                color.b,
                color.a,
                max.x,
                min.y,
                color.r,
                color.g,
                color.b,
                color.a,
                min.x,
                min.y,
                color.r,
                color.g,
                color.b,
                color.a,
            ])
        }
        const drawHollowRectRange = (min, max, color, borderWidth) => {
            const hborderw = borderWidth * 0.5

            const topleft = new _utils_math__WEBPACK_IMPORTED_MODULE_4__["v2"](min.x, max.y)
            const topright = max
            const bottomright = new _utils_math__WEBPACK_IMPORTED_MODULE_4__["v2"](max.x, min.y)
            const bottomleft = min

            drawRectRange(
                _utils_math__WEBPACK_IMPORTED_MODULE_4__["v2"].subs(topleft, hborderw),
                _utils_math__WEBPACK_IMPORTED_MODULE_4__["v2"].adds(topright, hborderw),
                color
            )
            drawRectRange(
                _utils_math__WEBPACK_IMPORTED_MODULE_4__["v2"].adds(topright, hborderw),
                _utils_math__WEBPACK_IMPORTED_MODULE_4__["v2"].subs(bottomright, hborderw),
                color
            )
            drawRectRange(
                _utils_math__WEBPACK_IMPORTED_MODULE_4__["v2"].adds(bottomright, hborderw),
                _utils_math__WEBPACK_IMPORTED_MODULE_4__["v2"].subs(bottomleft, hborderw),
                color
            )
            drawRectRange(
                _utils_math__WEBPACK_IMPORTED_MODULE_4__["v2"].adds(bottomleft, hborderw),
                _utils_math__WEBPACK_IMPORTED_MODULE_4__["v2"].subs(topleft, hborderw),
                color
            )
        }
        const drawHollowRect = (position, color, size, borderWidth) => {
            const hborderw = borderWidth * 0.5
            const min = _utils_math__WEBPACK_IMPORTED_MODULE_4__["v2"].subs(position, size)
            const max = _utils_math__WEBPACK_IMPORTED_MODULE_4__["v2"].adds(position, size)

            const topleft = new _utils_math__WEBPACK_IMPORTED_MODULE_4__["v2"](min.x, max.y)
            const topright = max
            const bottomright = new _utils_math__WEBPACK_IMPORTED_MODULE_4__["v2"](max.x, min.y)
            const bottomleft = min

            drawRectRange(
                _utils_math__WEBPACK_IMPORTED_MODULE_4__["v2"].subs(topleft, hborderw),
                _utils_math__WEBPACK_IMPORTED_MODULE_4__["v2"].adds(topright, hborderw),
                color
            )
            drawRectRange(
                _utils_math__WEBPACK_IMPORTED_MODULE_4__["v2"].adds(topright, hborderw),
                _utils_math__WEBPACK_IMPORTED_MODULE_4__["v2"].subs(bottomright, hborderw),
                color
            )
            drawRectRange(
                _utils_math__WEBPACK_IMPORTED_MODULE_4__["v2"].adds(bottomright, hborderw),
                _utils_math__WEBPACK_IMPORTED_MODULE_4__["v2"].subs(bottomleft, hborderw),
                color
            )
            drawRectRange(
                _utils_math__WEBPACK_IMPORTED_MODULE_4__["v2"].adds(bottomleft, hborderw),
                _utils_math__WEBPACK_IMPORTED_MODULE_4__["v2"].subs(topleft, hborderw),
                color
            )
        }
        const drawRect = (position, color, size) => {
            addVertices([
                -size + position.x,
                size + position.y,
                color.r,
                color.g,
                color.b,
                color.a,
                size + position.x,
                size + position.y,
                color.r,
                color.g,
                color.b,
                color.a,
                size + position.x,
                -size + position.y,
                color.r,
                color.g,
                color.b,
                color.a,

                -size + position.x,
                size + position.y,
                color.r,
                color.g,
                color.b,
                color.a,
                size + position.x,
                -size + position.y,
                color.r,
                color.g,
                color.b,
                color.a,
                -size + position.x,
                -size + position.y,
                color.r,
                color.g,
                color.b,
                color.a,
            ])
        }

        const drawHollowCircle = (
            position,
            color,
            size,
            borderWidth,
            num_vertices
        ) => {
            let p1 = new _utils_math__WEBPACK_IMPORTED_MODULE_4__["v2"](position.x + size, position.y)
            let p2
            const TWO_PI = Math.PI * 2
            for (let i = 1; i <= num_vertices + 3; i += 2) {
                const t = (i * TWO_PI) / num_vertices
                p2 = new _utils_math__WEBPACK_IMPORTED_MODULE_4__["v2"](
                    position.x + size * Math.cos(t),
                    position.y + size * Math.sin(t)
                )
                drawLine(p1, p2, color, borderWidth)
                p1 = p2
            }
        }

        const drawLine = (p1, p2, color, size) => {
            if (size < 0.0) size = 0.001

            // Get the distance between our two points
            let d = _utils_math__WEBPACK_IMPORTED_MODULE_4__["v2"].distance(p1, p2) * 0.5

            let dx = p2.x - p1.x
            let dy = p2.y - p1.y

            // Get the angle between our two points (radians)
            let theta = Math.atan2(dy, dx)

            let s = size

            let center = _utils_math__WEBPACK_IMPORTED_MODULE_4__["v2"].add(p1, p2).scale(0.5)

            // Draw center debug rects
            let bot = { x: center.x - d + s, y: center.y }
            let top = { x: center.x + d - s, y: center.y }

            drawCircle(p1, color, size, 36)
            drawCircle(p2, color, size, 36)

            // Rotate
            const min = _utils_math__WEBPACK_IMPORTED_MODULE_4__["v2"].subs(bot, s)
            const max = _utils_math__WEBPACK_IMPORTED_MODULE_4__["v2"].adds(top, s)

            // P1 and P2 should be min and max
            const pos2 = [
                new _utils_math__WEBPACK_IMPORTED_MODULE_4__["v2"](min.x, max.y),
                new _utils_math__WEBPACK_IMPORTED_MODULE_4__["v2"](max.x, max.y),
                new _utils_math__WEBPACK_IMPORTED_MODULE_4__["v2"](max.x, min.y),
                new _utils_math__WEBPACK_IMPORTED_MODULE_4__["v2"](min.x, max.y),
                new _utils_math__WEBPACK_IMPORTED_MODULE_4__["v2"](max.x, min.y),
                new _utils_math__WEBPACK_IMPORTED_MODULE_4__["v2"](min.x, min.y),
            ]

            const cth = Math.cos(theta)
            const sth = Math.sin(theta)

            for (let p of pos2) {
                // cx, cy - center of square coordinates
                // x, y - coordinates of a corner point of the square
                // theta is the angle of rotation

                // translate point to origin
                const tempX = p.x - center.x
                const tempY = p.y - center.y

                // now apply rotation
                const rotatedX = tempX * cth - tempY * sth
                const rotatedY = tempX * sth + tempY * cth

                // translate back
                p.x = rotatedX + center.x
                p.y = rotatedY + center.y
            }

            addVertices([
                pos2[0].x,
                pos2[0].y,
                color.r,
                color.g,
                color.b,
                color.a,
                pos2[1].x,
                pos2[1].y,
                color.r,
                color.g,
                color.b,
                color.a,
                pos2[2].x,
                pos2[2].y,
                color.r,
                color.g,
                color.b,
                color.a,
                pos2[3].x,
                pos2[3].y,
                color.r,
                color.g,
                color.b,
                color.a,
                pos2[4].x,
                pos2[4].y,
                color.r,
                color.g,
                color.b,
                color.a,
                pos2[5].x,
                pos2[5].y,
                color.r,
                color.g,
                color.b,
                color.a,
            ])
        }

        const drawHalfCircle = (center, color, radius, angle, numVertex) => {
            // Since each vertex consists of 3 points.
            const n_vertices = numVertex * 3

            // Setup the particle vertices
            let verts = []

            // Start out by setting the last inserted vertex to our center
            let last_vert = center

            let k = 0
            for (let i = 0; i < n_vertices + 3; ++i) {
                // Pos
                switch (k) {
                    case 0:
                        k += 1
                        verts.push(last_vert.x)
                        verts.push(last_vert.y)
                        break
                    case 1: {
                        k += 1
                        const cont = angle + ((i - 1) * Math.PI) / n_vertices
                        last_vert = new _utils_math__WEBPACK_IMPORTED_MODULE_4__["v2"](
                            center.x + radius * Math.cos(cont),
                            center.y + radius * Math.sin(cont)
                        )
                        verts.push(last_vert.x)
                        verts.push(last_vert.y)
                        break
                    }
                    case 2:
                        k = 0
                        verts.push(center.x)
                        verts.push(center.y)
                        break
                    default:
                        k = 0
                        break
                }

                // Color
                verts.push(color.r)
                verts.push(color.g)
                verts.push(color.b)
                verts.push(color.a)
            }
            addVertices(verts)
        }

        const drawCircle = (center, color, size, num_vertices) => {
            // Setup the particle vertices
            let verts = []

            let last_vert = center

            let k = 0
            for (let i = 0; i < num_vertices + 3; ++i) {
                switch (k++) {
                    case 0:
                        verts.push(last_vert.x)
                        verts.push(last_vert.y)
                        break
                    case 1:
                        const t = (i * Math.PI * 2.0) / num_vertices
                        last_vert = {
                            x: center.x + size * Math.cos(t),
                            y: center.y + size * Math.sin(t),
                        }
                        verts.push(last_vert.x)
                        verts.push(last_vert.y)
                        break
                    case 2:
                        k = 0
                        verts.push(center.x)
                        verts.push(center.y)
                        break
                }

                verts.push(color.r)
                verts.push(color.g)
                verts.push(color.b)
                verts.push(color.a)
            }
            // console.log(verts.length, num_vertices)
            addVertices(verts)
        }

        function addVertices (verts) {
            // Update our vertices
            vertices.push(...verts)
        }

        function updateValues () {
            canvasWidth = parent.offsetWidth
            canvasHeight = 500

            var desiredCSSWidth = canvasWidth
            var desiredCSSHeight = canvasHeight
            devicePixelRatio = window.devicePixelRatio || 1

            canvas.width = desiredCSSWidth * devicePixelRatio
            canvas.height = desiredCSSHeight * devicePixelRatio

            canvas.style.width = desiredCSSWidth + 'px'
            canvas.style.height = desiredCSSHeight + 'px'

            canvasWidth *= devicePixelRatio
            canvasHeight *= devicePixelRatio

            frontColor = normalize(window.color.text)
            frontColor.a = 1

            backColor = normalize(window.color.background)
            backColor.a = 1

            boundsHighlightColor = {r: 0, g: 1, b:0, a: 1}
        }

        function erase() {
            particles.length = 0
            particleColors.length = 0
        }

        function drawUI () {
            // Show the cursor as a hollow circle with the current selected size.

            // But only if it is inside the canvas
            if (focused)
                drawHollowCircle(
                    mouse,
                    frontColor,
                    getParticleSize(),
                    0.5 * devicePixelRatio,
                    36
                )
        }
        function baseLineComparisons() {
            const n = particles.length
            return (n * (n - 1)) / 2
        }
        function comparisonsDelta() {
            return baseLineComparisons() / comparisons
        }
        function addUI (){
            ui = Object(_utils_query__WEBPACK_IMPORTED_MODULE_2__["default"])('<ul>')
            ui.id = `${parent.id}-info`
            ui.className = 'demo-info-list'
            parent.insertBefore(ui, canvas)
        }

        function updateUI (show = true, fontSize = 14){
            ui.innerHTML = ''
            ui.style = `font-size: ${fontSize}px; display: ${
                show ? 'inline' : 'none'
            };`
            const labels = [
                `FPS: ${lastFps}`,
                `Particles: ${particles.length}`,
                `Comparisons: ${comparisons}(${comparisonsDelta().toFixed(0)}x)`,
            ]

            for (const label of labels) {
                const l = Object(_utils_query__WEBPACK_IMPORTED_MODULE_2__["default"])('<li>')
                l.textContent = label
                l.className = 'demo-info-list-element'
                ui.appendChild(l)
            }
        }

        function getRelativeMousePosition (event, target) {
            target = target || event.target
            const rect = target.getBoundingClientRect()

            return {
                x: event.clientX - rect.left,
                y: event.clientY - rect.top,
            }
        }

        function updateMousePos (event, target) {
            target = target || event.target
            let pos = getRelativeMousePosition(event, target)

            pos.x *= devicePixelRatio
            pos.y *= devicePixelRatio

            mouse = pos
        }

        function getMousePosInViewspace (){
            const x = mouse.x
            const y = mouse.y

            const w = canvasWidth
            const h = canvasHeight

            return {
                x: -1.0 + (2 * x) / w / devicePixelRatio,
                y: 1.0 - (2 * y) / h / devicePixelRatio,
            }
        }

        function drawAllParticles() {
            const particleCount = particles.length
            const vertexCount = 36
            for (let i = 0; i < particleCount; ++i) {
                const particle = particles[i]
                const position = particle.position
                const radius = particle.radius
                const color = particleColors[i]
                drawCircle(position, color, radius, vertexCount)
                drawHollowCircle(
                    position,
                    backColor,
                    radius,
                    0.3 * devicePixelRatio,
                    vertexCount
                )
                particleColors[i] = {
                    r: frontColor.r,
                    g: frontColor.g,
                    b: frontColor.b,
                    a: 1,
                }
            }
        }

        function spawnParticle() {
            const size = getParticleSize()
            let particle = new _utils_particle__WEBPACK_IMPORTED_MODULE_3__["default"](mouse.x, mouse.y, size)
            particles.push(particle)
            particleColors.push(particleColor)
        }

        function toViewspace(v) {
            const w = canvasWidth
            const h = canvasHeight

            return {
                x: -1.0 + (2 * v.x) / w / devicePixelRatio,
                y: 1.0 - (2 * v.y) / h / devicePixelRatio,
            }
        }

        function getParticleSize() {
            return particleSize * devicePixelRatio
        }

        function animate() {
            updateValues()

            gl.clearColor(backColor.r, backColor.g, backColor.b, 1.0)
            gl.clear(gl.COLOR_BUFFER_BIT)

            const time = Object(_utils_utility__WEBPACK_IMPORTED_MODULE_5__["getTime"])()
            if (useQuadtree) {
                let min = new _utils_math__WEBPACK_IMPORTED_MODULE_4__["v2"](0, 0)
                let max = new _utils_math__WEBPACK_IMPORTED_MODULE_4__["v2"](canvasWidth, canvasHeight)

                if (useOptimizedBounds) {
                    const temp = Object(_utils_utility__WEBPACK_IMPORTED_MODULE_5__["getMinAndMaxPosition"])(particles)
                    min = temp.min
                    max = temp.max
                }

                quadtreeBounds = new _utils_utility__WEBPACK_IMPORTED_MODULE_5__["Rect"](min, max)
                const quadtree = new _utils_quadtree__WEBPACK_IMPORTED_MODULE_6__["default"](0, quadtreeBounds)

                quadtree.input(particles)

                allBounds = []
                quadtree.getNodesBounds(allBounds)

                tree = []
                quadtree.getIndices(tree)

                if (showNodes) {
                    for (const bound of allBounds) {
                        const x = bound.min.x
                        const y = bound.min.y
                        const width = bound.max.x - bound.min.x - 1
                        const height = bound.max.y - bound.min.y - 1
                        drawHollowRectRange(
                            new _utils_math__WEBPACK_IMPORTED_MODULE_4__["v2"](x, y),
                            new _utils_math__WEBPACK_IMPORTED_MODULE_4__["v2"](x + width, y + height),
                            frontColor,
                            2 * devicePixelRatio
                        )
                    }
                }

                // Only draw the neighbours if the app
                // is in focus.
                // Otherwise when the user leaves the region
                // the mouse will be stuck in the last place and
                // distract the user.
                if (focused && showNeighbours) {

                    let neighbours = []
                    quadtree.getNeighbourNodes(neighbours, {
                        position: mouse,
                        radius: getParticleSize(),
                    })

                    // Draw all neighbours in a highlight color.
                    neighbours.forEach(node => {
                        const bound = node.bounds
                        const x = bound.min.x
                        const y = bound.min.y
                        const width = bound.max.x - bound.min.x - 1
                        const height = bound.max.y - bound.min.y - 1
                        drawHollowRectRange(
                            new _utils_math__WEBPACK_IMPORTED_MODULE_4__["v2"](x, y),
                            new _utils_math__WEBPACK_IMPORTED_MODULE_4__["v2"](x + width, y + height),
                            boundsHighlightColor,
                            2 * devicePixelRatio
                        )
                        // Draw the particles
                        node.indices.forEach(index => {
                            particleColors[index] = boundsHighlightColor
                        })
                    })
                }
            }

            if (enableCollision) {
                let res
                if (useQuadtree) {
                    res = resolveCollisionsQuadtree(particles, tree)
                } else {
                    res = resolveCollisions(particles)
                }
                comparisons = res.comparisons
                hits = res.hits
            }

            if (!paused) {
                const gravityY = enableGravity ? 0.0981 : 0.0
                for (let particle of particles) {
                    particle.update(
                        {
                            width: canvasWidth,
                            height: canvasHeight,
                        },
                        { x: 0.0, y: gravityY }
                    )
                }
            }

            drawAllParticles()
            draw()
            drawUI()

            window.requestAnimationFrame(animate)
        }

        function draw() {
            if (vertices.length === 0) return

            const displaySize = new _utils_math__WEBPACK_IMPORTED_MODULE_4__["v2"](canvasWidth, canvasHeight)

            // Setup viewport, orthographic projection matrix
            gl.viewport(0, 0, canvasWidth, canvasHeight)
            const ortho_projection = _utils_math__WEBPACK_IMPORTED_MODULE_4__["mat4"].fromValues(
                2.0 / displaySize.x,
                0.0,
                0.0,
                0.0,
                0.0,
                2.0 / -displaySize.y,
                0.0,
                0.0,
                0.0,
                0.0,
                -1.0,
                0.0,
                -1.0,
                1.0,
                0.0,
                1.0
            )

            gl.useProgram(program)
            gl.uniformMatrix4fv(gAttribLocationProjMtx, gl.FALSE, ortho_projection)
            gl.bindVertexArray(vao)
            gl.bindBuffer(gl.ARRAY_BUFFER, vbo)
            gl.bufferData(
                gl.ARRAY_BUFFER,
                new Float32Array(vertices),
                gl.DYNAMIC_DRAW
            )

            // Finally draw the vertices
            gl.drawArrays(gl.TRIANGLES, 0, vertices.length / 6)

            vertices = []
            updateFPS()
        }
        function updateFPS() {
            lastFps = 1 / (Object(_utils_utility__WEBPACK_IMPORTED_MODULE_5__["getTime"])() - lastTime)
            lastTime = Object(_utils_utility__WEBPACK_IMPORTED_MODULE_5__["getTime"])()
            lastFps = lastFps.toFixed(0)
        }

        animate()
    });

	$$self.$capture_state = () => {
		return {};
	};

	$$self.$inject_state = $$props => {};

	return {};
}

class P2d extends svelte_internal__WEBPACK_IMPORTED_MODULE_0__["SvelteComponentDev"] {
	constructor(options) {
		super(options);
		Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["init"])(this, options, instance, create_fragment, svelte_internal__WEBPACK_IMPORTED_MODULE_0__["safe_not_equal"], []);
		Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["dispatch_dev"])("SvelteRegisterComponent", { component: this, tagName: "P2d", options, id: create_fragment.name });
	}
}

/* harmony default export */ __webpack_exports__["default"] = (P2d);

/***/ }),

/***/ "./src/components/utils/particle.js":
/*!******************************************!*\
  !*** ./src/components/utils/particle.js ***!
  \******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Particle; });
/* harmony import */ var _math__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./math */ "./src/components/utils/math.js");
/* harmony import */ var _utility__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utility */ "./src/components/utils/utility.js");



class Particle {
    constructor(x, y, r) {
        this.position = new _math__WEBPACK_IMPORTED_MODULE_0__["v2"](x, y)
        this.velocity = new _math__WEBPACK_IMPORTED_MODULE_0__["v2"](Object(_utility__WEBPACK_IMPORTED_MODULE_1__["random"])(-1, 1), Object(_utility__WEBPACK_IMPORTED_MODULE_1__["random"])(-1, 1)).scale(2)
        this.radius = r
        this.mass = r
    }

    update(bounds, gravity) {
        // Border collision
        if (this.position.x <= this.radius && this.velocity.x < 0) {
            this.position.x = this.radius
            this.velocity.x = -this.velocity.x
        }
        if (
            this.position.x >= bounds.width - this.radius &&
            this.velocity.x > 0
        ) {
            this.position.x = bounds.width - this.radius
            this.velocity.x = -this.velocity.x
        }
        if (this.position.y <= this.radius && this.velocity.y < 0) {
            this.position.y = this.radius
            this.velocity.y = -this.velocity.y
        }
        if (
            this.position.y >= bounds.height - this.radius &&
            this.velocity.y > 0
        ) {
            this.position.y = bounds.height - this.radius
            this.velocity.y = -this.velocity.y
        }
        this.velocity.add(gravity)
        this.position.add(this.velocity)
    }

    collidesWith(b) {
        const dx = b.position.x - this.position.x
        const dy = b.position.y - this.position.y
        const sumRadius = this.radius + b.radius
        const sqrRadius = sumRadius * sumRadius
        const distSqr = dx * dx + dy * dy
        if (distSqr <= sqrRadius) return true
        return false
    }

    resolveCollision(b) {
        
        const m1 = this.mass
        const m2 = b.mass
        const dx = b.position.x - this.position.x
        const dy = b.position.y - this.position.y
        const vdx = b.velocity.x - this.velocity.x
        const vdy = b.velocity.y - this.velocity.y
        const d = dx * vdx + dy * vdy

        if (d < 0) {
            const norm_vec = new _math__WEBPACK_IMPORTED_MODULE_0__["v2"](dx, dy).normalize()
            const tang_vec = new _math__WEBPACK_IMPORTED_MODULE_0__["v2"](norm_vec.y * -1.0, norm_vec.x)
            const scal_norm_1 = _math__WEBPACK_IMPORTED_MODULE_0__["v2"].dot(norm_vec, this.velocity)
            const scal_norm_2 = _math__WEBPACK_IMPORTED_MODULE_0__["v2"].dot(norm_vec, b.velocity)
            const scal_tang_1 = _math__WEBPACK_IMPORTED_MODULE_0__["v2"].dot(tang_vec, this.velocity)
            const scal_tang_2 = _math__WEBPACK_IMPORTED_MODULE_0__["v2"].dot(tang_vec, b.velocity)
            const scal_norm_1_after = (scal_norm_1 * (m1 - m2) + 2 * m2 * scal_norm_2) / (m1 + m2)
            const scal_norm_2_after = (scal_norm_2 * (m2 - m1) + 2 * m1 * scal_norm_1) / (m1 + m2)
            const scal_norm_1_after_vec = _math__WEBPACK_IMPORTED_MODULE_0__["v2"].scale(norm_vec, scal_norm_1_after)
            const scal_norm_2_after_vec = _math__WEBPACK_IMPORTED_MODULE_0__["v2"].scale(norm_vec, scal_norm_2_after)
            const scal_norm_1_vec = _math__WEBPACK_IMPORTED_MODULE_0__["v2"].scale(tang_vec, scal_tang_1)
            const scal_norm_2_vec = _math__WEBPACK_IMPORTED_MODULE_0__["v2"].scale(tang_vec, scal_tang_2)

            this.velocity = scal_norm_1_vec.add(scal_norm_1_after_vec)
            b.velocity = scal_norm_2_vec.add(scal_norm_2_after_vec)
        }
    }
}


/***/ }),

/***/ "./src/components/utils/quadtree.js":
/*!******************************************!*\
  !*** ./src/components/utils/quadtree.js ***!
  \******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Quadtree; });
/* harmony import */ var _math__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./math */ "./src/components/utils/math.js");
/* harmony import */ var _utility__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utility */ "./src/components/utils/utility.js");
let data = []




const DEFAULT_MAX_NODE_CAPACITY = 10
const DEFAULT_MAX_NODE_DEPTH = 5

class Quadtree {
    constructor(depth, bounds) {
        this.maxCapacityPerNode = DEFAULT_MAX_NODE_CAPACITY
        this.maxDepth = DEFAULT_MAX_NODE_DEPTH
        this.depth = depth
        this.bounds = bounds
        this.subnodes = [4]
        this.indices = []
        this.hasSplit = false
    }

    visit(callback) {
        if (this.hasSplit) {
            this.subnodes[0].visit(callback)
            this.subnodes[1].visit(callback)
            this.subnodes[2].visit(callback)
            this.subnodes[3].visit(callback)
            return
        }
        return callback(this)
    }

    split() {
        const min = this.bounds.min
        const max = this.bounds.max
        const x = min.x
        const y = min.y
        const width = max.x - min.x
        const height = max.y - min.y
        const w = width * 0.5
        const h = height * 0.5
        const SW = new _utility__WEBPACK_IMPORTED_MODULE_1__["Rect"](new _math__WEBPACK_IMPORTED_MODULE_0__["v2"](x, y), new _math__WEBPACK_IMPORTED_MODULE_0__["v2"](x + w, y + h))
        const SE = new _utility__WEBPACK_IMPORTED_MODULE_1__["Rect"](new _math__WEBPACK_IMPORTED_MODULE_0__["v2"](x + w, y), new _math__WEBPACK_IMPORTED_MODULE_0__["v2"](x + width, y + h))
        const NW = new _utility__WEBPACK_IMPORTED_MODULE_1__["Rect"](new _math__WEBPACK_IMPORTED_MODULE_0__["v2"](x, y + h), new _math__WEBPACK_IMPORTED_MODULE_0__["v2"](x + w, y + height))
        const NE = new _utility__WEBPACK_IMPORTED_MODULE_1__["Rect"](new _math__WEBPACK_IMPORTED_MODULE_0__["v2"](x + w, y + h), new _math__WEBPACK_IMPORTED_MODULE_0__["v2"](x + width, y + height))
        this.subnodes[0] = new Quadtree(this.depth + 1, SW)
        this.subnodes[1] = new Quadtree(this.depth + 1, SE)
        this.subnodes[2] = new Quadtree(this.depth + 1, NW)
        this.subnodes[3] = new Quadtree(this.depth + 1, NE)
        this.hasSplit = true
    }

    input(objects) {
        data = objects
        const objectCount = data.length
        for (let i = 0; i < objectCount; i++) {
            this.insert(i)
        }
    }

    contains(index) {
        return this.bounds.containsPoint(
            data[index].position,
            data[index].radius
        )
    }

    insert(index) {
        // If this node has split add it to the children instead
        if (this.hasSplit) {
            if (this.subnodes[0].contains(index)) {
                this.subnodes[0].insert(index)
            }
            if (this.subnodes[1].contains(index)) {
                this.subnodes[1].insert(index)
            }
            if (this.subnodes[2].contains(index)) {
                this.subnodes[2].insert(index)
            }
            if (this.subnodes[3].contains(index)) {
                this.subnodes[3].insert(index)
            }
            return
        }
        // .. else add it here.
        this.indices.push(index)
        // Then if we've reached our max capacity..
        if (
            this.indices.length > this.maxCapacityPerNode &&
            this.depth < this.maxDepth
        ) {
            // ..split..
            this.split()
            //  ..and move the indices from this node to the new ones
            for (const i of this.indices) {
                if (this.subnodes[0].contains(i)) {
                    this.subnodes[0].insert(i)
                }
                if (this.subnodes[1].contains(i)) {
                    this.subnodes[1].insert(i)
                }
                if (this.subnodes[2].contains(i)) {
                    this.subnodes[2].insert(i)
                }
                if (this.subnodes[3].contains(i)) {
                    this.subnodes[3].insert(i)
                }
            }
            // .. and clear this one out
            this.indices = []
        }
    }

    getIndices(nodes) {
        if (this.hasSplit) {
            this.subnodes[0].getIndices(nodes)
            this.subnodes[1].getIndices(nodes)
            this.subnodes[2].getIndices(nodes)
            this.subnodes[3].getIndices(nodes)
            return
        }
        if (this.indices.length != 0) {
            nodes.push(this.indices)
        }
    }

    getNeighbours(nodes, object) {
        if (this.hasSplit) {
            if (
                this.subnodes[0].bounds.containsPoint(
                    object.position,
                    object.radius
                )
            ) {
                this.subnodes[0].getNeighbours(nodes, object)
            }
            if (
                this.subnodes[1].bounds.containsPoint(
                    object.position,
                    object.radius
                )
            ) {
                this.subnodes[1].getNeighbours(nodes, object)
            }
            if (
                this.subnodes[2].bounds.containsPoint(
                    object.position,
                    object.radius
                )
            ) {
                this.subnodes[2].getNeighbours(nodes, object)
            }
            if (
                this.subnodes[3].bounds.containsPoint(
                    object.position,
                    object.radius
                )
            ) {
                this.subnodes[3].getNeighbours(nodes, object)
            }
            return false
        }
        if (this.indices.length != 0) {
            nodes.push(this.indices)
        }
    }

    getNeighbourNodes(nodes, object) {
        if (this.hasSplit) {
            if (
                this.subnodes[0].bounds.containsPoint(
                    object.position,
                    object.radius
                )
            )
                this.subnodes[0].getNeighbourNodes(nodes, object)

            if (
                this.subnodes[1].bounds.containsPoint(
                    object.position,
                    object.radius
                )
            )
                this.subnodes[1].getNeighbourNodes(nodes, object)

            if (
                this.subnodes[2].bounds.containsPoint(
                    object.position,
                    object.radius
                )
            )
                this.subnodes[2].getNeighbourNodes(nodes, object)
            if (
                this.subnodes[3].bounds.containsPoint(
                    object.position,
                    object.radius
                )
            )
                this.subnodes[3].getNeighbourNodes(nodes, object)
            return
        }
        nodes.push(this)
    }

    getNodesBounds(container) {
        if (this.hasSplit) {
            this.subnodes[0].getNodesBounds(container)
            this.subnodes[1].getNodesBounds(container)
            this.subnodes[2].getNodesBounds(container)
            this.subnodes[3].getNodesBounds(container)
            return
        }
        container.push(this.bounds)
    }

    colorNeighbours(position, radius, color) {
        if (this.hasSplit) {
            if (this.subnodes[0].bounds.containsPoint(position, radius)) {
                this.subnodes[0].colorNeighbours(position, radius, color)
            }
            if (this.subnodes[1].bounds.containsPoint(position, radius)) {
                this.subnodes[1].colorNeighbours(position, radius, color)
            }
            if (this.subnodes[2].bounds.containsPoint(position, radius)) {
                this.subnodes[2].colorNeighbours(position, radius, color)
            }
            if (this.subnodes[3].bounds.containsPoint(position, radius)) {
                this.subnodes[3].colorNeighbours(position, radius, color)
            }
            return false
        }
        this.bounds.color = color
    }
}


/***/ }),

/***/ "./src/routes/blog.svelte":
/*!********************************!*\
  !*** ./src/routes/blog.svelte ***!
  \********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var svelte_internal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! svelte/internal */ "./node_modules/svelte/internal/index.mjs");
/* harmony import */ var _components_p2d_svelte__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../components/p2d.svelte */ "./src/components/p2d.svelte");
/* src/routes/blog.svelte generated by Svelte v3.12.1 */



const file = "src/routes/blog.svelte";

function create_fragment(ctx) {
	var current;

	var p2d = new _components_p2d_svelte__WEBPACK_IMPORTED_MODULE_1__["default"]({ $$inline: true });

	const block = {
		c: function create() {
			p2d.$$.fragment.c();
			this.h()
		},

		l: function claim(nodes) {
			p2d.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			document.title = "Blog";
		},

		m: function mount(target, anchor) {
			Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["mount_component"])(p2d, target, anchor);
			current = true;
		},

		p: svelte_internal__WEBPACK_IMPORTED_MODULE_0__["noop"],

		i: function intro(local) {
			if (current) return;
			Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["transition_in"])(p2d.$$.fragment, local);

			current = true;
		},

		o: function outro(local) {
			Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["transition_out"])(p2d.$$.fragment, local);
			current = false;
		},

		d: function destroy(detaching) {
			Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["destroy_component"])(p2d, detaching);
		}
	};
	Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["dispatch_dev"])("SvelteRegisterBlock", { block, id: create_fragment.name, type: "component", source: "", ctx });
	return block;
}

class Blog extends svelte_internal__WEBPACK_IMPORTED_MODULE_0__["SvelteComponentDev"] {
	constructor(options) {
		super(options);
		Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["init"])(this, options, null, create_fragment, svelte_internal__WEBPACK_IMPORTED_MODULE_0__["safe_not_equal"], []);
		Object(svelte_internal__WEBPACK_IMPORTED_MODULE_0__["dispatch_dev"])("SvelteRegisterComponent", { component: this, tagName: "Blog", options, id: create_fragment.name });
	}
}

/* harmony default export */ __webpack_exports__["default"] = (Blog);

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,